#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Network UPS Tools
# Simplified PowerMan to NUT PDU Sync Service
# ==============================================================================

# Only run if PowerMan is enabled
if ! bashio::config.true 'powerman_enabled'; then
    bashio::log.info "PowerMan sync service not needed (PowerMan disabled)"
    exec sleep 864000
fi

# Wait for PowerMan to be ready
bashio::log.info "Starting Simplified PowerMan-NUT sync service..."
sleep 10

# Check if PowerMan is running
if ! nc -z 127.0.0.1 10101 2>/dev/null; then
    bashio::log.error "PowerMan not running, sync service exiting"
    exec sleep 864000
fi

bashio::log.info "PowerMan-NUT sync service started"

# Get PDU configuration
PDU_HOST=$(bashio::config 'powerman_pdu_host' || echo "192.168.51.124")
PDU_NAME=$(bashio::config 'powerman_pdu_name' || echo "rack_pdu")

bashio::log.info "Monitoring PDU: ${PDU_NAME} at ${PDU_HOST}"

# Main sync loop
while true; do
    # Check if we have any rack_pdu device file
    if [ -f /etc/nut/rack_pdu.dev ]; then
        # Query PowerMan for PDU status
        PDU_STATUS=""
        
        # Try using netcat to get status
        PDU_STATUS=$(echo "query ${PDU_NAME}" | nc -w 2 127.0.0.1 10101 2>/dev/null || true)
        
        if [ -z "${PDU_STATUS}" ]; then
            bashio::log.warning "Failed to query PowerMan, retrying..."
            sleep 5
            continue
        fi
        
        bashio::log.debug "PowerMan status: ${PDU_STATUS}"
        
        # Create new status file with basic info
        cat > /tmp/rack_pdu.dev.new << 'EOF'
# APC AP7900B PDU via PowerMan
# Auto-generated - do not edit manually
device.mfr: APC
device.model: AP7900B
device.serial: PowerMan-Managed
device.type: pdu
driver.name: dummy-ups
driver.parameter.mode: dummy
driver.parameter.port: rack_pdu.dev
driver.version: 2.8.1

# Overall PDU status
ups.status: OL
ups.mfr: APC
ups.model: AP7900B PDU (PowerMan)
outlet.count: 8
outlet.desc: All outlets
outlet.id: 0
outlet.switchable: 1

EOF
        
        # Parse outlet status from PowerMan
        # PowerMan typically returns format like: rack_pdu: 1=on 2=on 3=off ...
        for i in {1..8}; do
            STATUS="on"  # Default to on
            
            # Check PowerMan output for this outlet
            if echo "${PDU_STATUS}" | grep -q "${i}=on"; then
                STATUS="on"
            elif echo "${PDU_STATUS}" | grep -q "${i}=off"; then
                STATUS="off"
            elif echo "${PDU_STATUS}" | grep -q "outlet${i}=on"; then
                STATUS="on"
            elif echo "${PDU_STATUS}" | grep -q "outlet${i}=off"; then
                STATUS="off"
            fi
            
            # Write outlet information
            cat >> /tmp/rack_pdu.dev.new << EOF
# Outlet ${i}
outlet.${i}.desc: Outlet ${i}
outlet.${i}.id: ${i}
outlet.${i}.status: ${STATUS}
outlet.${i}.switchable: 1

EOF
        done
        
        # Try SNMP for current/power if available
        SNMP_WORKS=false
        if command -v snmpget &>/dev/null; then
            # Test SNMP connectivity
            if timeout 2 snmpget -v1 -c public ${PDU_HOST} sysDescr.0 2>/dev/null | grep -q "APC"; then
                SNMP_WORKS=true
                bashio::log.debug "SNMP connection successful"
            else
                bashio::log.debug "SNMP not available for ${PDU_HOST}"
            fi
        fi
        
        if [ "${SNMP_WORKS}" = true ]; then
            TOTAL_CURRENT=0
            TOTAL_POWER=0
            
            # Add current/power data for each outlet
            for i in {1..8}; do
                # Get current (in deciamps, convert to amps)
                CURRENT_RAW=$(snmpget -v1 -c public -Ovq ${PDU_HOST} .1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.1.${i} 2>/dev/null | grep -oE '[0-9]+' || echo "0")
                
                if [ "${CURRENT_RAW}" != "0" ] && [ -n "${CURRENT_RAW}" ]; then
                    CURRENT=$(echo "scale=2; ${CURRENT_RAW} / 10" | bc 2>/dev/null || echo "0")
                    TOTAL_CURRENT=$(echo "scale=2; ${TOTAL_CURRENT} + ${CURRENT}" | bc 2>/dev/null || echo "0")
                    
                    # Estimate power (current * 120V)
                    POWER=$(echo "scale=0; ${CURRENT} * 120" | bc 2>/dev/null || echo "0")
                    TOTAL_POWER=$(echo "${TOTAL_POWER} + ${POWER}" | bc 2>/dev/null || echo "0")
                    
                    # Append to outlet section
                    cat >> /tmp/rack_pdu.dev.new << EOF
outlet.${i}.current: ${CURRENT}
outlet.${i}.power: ${POWER}
outlet.${i}.voltage: 120

EOF
                fi
            done
            
            # Add total metrics if we got any data
            if [ "${TOTAL_CURRENT}" != "0" ]; then
                cat >> /tmp/rack_pdu.dev.new << EOF
# Total PDU metrics
outlet.current: ${TOTAL_CURRENT}
outlet.power: ${TOTAL_POWER}
outlet.voltage: 120
ups.load: $(echo "scale=1; ${TOTAL_POWER} / 1440 * 100" | bc 2>/dev/null || echo "0")

EOF
            fi
        else
            bashio::log.info "SNMP not available - outlet status only"
        fi
        
        # Atomically update the file
        mv /tmp/rack_pdu.dev.new /etc/nut/rack_pdu.dev 2>/dev/null || true
        
        # Signal dummy-ups driver to reload (if running)
        if pgrep -f "dummy-ups.*rack_pdu" > /dev/null; then
            # Send HUP signal to reload configuration
            pkill -HUP -f "dummy-ups.*rack_pdu" 2>/dev/null || true
        fi
        
        bashio::log.debug "PDU status updated"
    else
        bashio::log.warning "No rack_pdu.dev file found, waiting..."
    fi
    
    # Sleep for 15 seconds before next update
    sleep 15
done
